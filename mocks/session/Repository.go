// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	session "github.com/RagOfJoes/mylo/session"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, newSession
func (_m *Repository) Create(ctx context.Context, newSession session.Session) (*session.Session, error) {
	ret := _m.Called(ctx, newSession)

	var r0 *session.Session
	if rf, ok := ret.Get(0).(func(context.Context, session.Session) *session.Session); ok {
		r0 = rf(ctx, newSession)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, session.Session) error); ok {
		r1 = rf(ctx, newSession)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllIdentity provides a mock function with given fields: ctx, identityID
func (_m *Repository) DeleteAllIdentity(ctx context.Context, identityID uuid.UUID) error {
	ret := _m.Called(ctx, identityID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, identityID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *Repository) Get(ctx context.Context, id uuid.UUID) (*session.Session, error) {
	ret := _m.Called(ctx, id)

	var r0 *session.Session
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *session.Session); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByToken provides a mock function with given fields: ctx, token
func (_m *Repository) GetByToken(ctx context.Context, token string) (*session.Session, error) {
	ret := _m.Called(ctx, token)

	var r0 *session.Session
	if rf, ok := ret.Get(0).(func(context.Context, string) *session.Session); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, updateSession
func (_m *Repository) Update(ctx context.Context, updateSession session.Session) (*session.Session, error) {
	ret := _m.Called(ctx, updateSession)

	var r0 *session.Session
	if rf, ok := ret.Get(0).(func(context.Context, session.Session) *session.Session); ok {
		r0 = rf(ctx, updateSession)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, session.Session) error); ok {
		r1 = rf(ctx, updateSession)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
