// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	credential "github.com/RagOfJoes/mylo/user/credential"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// ComparePassword provides a mock function with given fields: ctx, identityID, password
func (_m *Service) ComparePassword(ctx context.Context, identityID uuid.UUID, password string) error {
	ret := _m.Called(ctx, identityID, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, identityID, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePassword provides a mock function with given fields: ctx, identityID, password, identifiers
func (_m *Service) CreatePassword(ctx context.Context, identityID uuid.UUID, password string, identifiers []credential.Identifier) (*credential.Credential, error) {
	ret := _m.Called(ctx, identityID, password, identifiers)

	var r0 *credential.Credential
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, []credential.Identifier) *credential.Credential); ok {
		r0 = rf(ctx, identityID, password, identifiers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credential.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, []credential.Identifier) error); ok {
		r1 = rf(ctx, identityID, password, identifiers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPasswordWithIdentifier provides a mock function with given fields: ctx, Identifier
func (_m *Service) FindPasswordWithIdentifier(ctx context.Context, Identifier string) (*credential.Credential, error) {
	ret := _m.Called(ctx, Identifier)

	var r0 *credential.Credential
	if rf, ok := ret.Get(0).(func(context.Context, string) *credential.Credential); ok {
		r0 = rf(ctx, Identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credential.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, Identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: ctx, identityID, newPassword
func (_m *Service) UpdatePassword(ctx context.Context, identityID uuid.UUID, newPassword string) (*credential.Credential, error) {
	ret := _m.Called(ctx, identityID, newPassword)

	var r0 *credential.Credential
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *credential.Credential); ok {
		r0 = rf(ctx, identityID, newPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credential.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, identityID, newPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
