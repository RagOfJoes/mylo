// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	credential "github.com/RagOfJoes/mylo/user/credential"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, newCredential
func (_m *Repository) Create(ctx context.Context, newCredential credential.Credential) (*credential.Credential, error) {
	ret := _m.Called(ctx, newCredential)

	var r0 *credential.Credential
	if rf, ok := ret.Get(0).(func(context.Context, credential.Credential) *credential.Credential); ok {
		r0 = rf(ctx, newCredential)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credential.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, credential.Credential) error); ok {
		r1 = rf(ctx, newCredential)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetIdentifier provides a mock function with given fields: ctx, identifier
func (_m *Repository) GetIdentifier(ctx context.Context, identifier string) (*credential.Identifier, error) {
	ret := _m.Called(ctx, identifier)

	var r0 *credential.Identifier
	if rf, ok := ret.Get(0).(func(context.Context, string) *credential.Identifier); ok {
		r0 = rf(ctx, identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credential.Identifier)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithIdentifier provides a mock function with given fields: ctx, credentialType, identifier
func (_m *Repository) GetWithIdentifier(ctx context.Context, credentialType credential.CredentialType, identifier string) (*credential.Credential, error) {
	ret := _m.Called(ctx, credentialType, identifier)

	var r0 *credential.Credential
	if rf, ok := ret.Get(0).(func(context.Context, credential.CredentialType, string) *credential.Credential); ok {
		r0 = rf(ctx, credentialType, identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credential.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, credential.CredentialType, string) error); ok {
		r1 = rf(ctx, credentialType, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithIdentityID provides a mock function with given fields: ctx, credentialType, identityID
func (_m *Repository) GetWithIdentityID(ctx context.Context, credentialType credential.CredentialType, identityID uuid.UUID) (*credential.Credential, error) {
	ret := _m.Called(ctx, credentialType, identityID)

	var r0 *credential.Credential
	if rf, ok := ret.Get(0).(func(context.Context, credential.CredentialType, uuid.UUID) *credential.Credential); ok {
		r0 = rf(ctx, credentialType, identityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credential.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, credential.CredentialType, uuid.UUID) error); ok {
		r1 = rf(ctx, credentialType, identityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, updateCredential
func (_m *Repository) Update(ctx context.Context, updateCredential credential.Credential) (*credential.Credential, error) {
	ret := _m.Called(ctx, updateCredential)

	var r0 *credential.Credential
	if rf, ok := ret.Get(0).(func(context.Context, credential.Credential) *credential.Credential); ok {
		r0 = rf(ctx, updateCredential)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*credential.Credential)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, credential.Credential) error); ok {
		r1 = rf(ctx, updateCredential)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
