// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	identity "github.com/RagOfJoes/mylo/user/identity"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user, username, password
func (_m *Service) Create(ctx context.Context, user identity.Identity, username string, password string) (*identity.Identity, error) {
	ret := _m.Called(ctx, user, username, password)

	var r0 *identity.Identity
	if rf, ok := ret.Get(0).(func(context.Context, identity.Identity, string, string) *identity.Identity); ok {
		r0 = rf(ctx, user, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, identity.Identity, string, string) error); ok {
		r1 = rf(ctx, user, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id, permanent
func (_m *Service) Delete(ctx context.Context, id string, permanent bool) error {
	ret := _m.Called(ctx, id, permanent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, id, permanent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, id
func (_m *Service) Find(ctx context.Context, id string) (*identity.Identity, error) {
	ret := _m.Called(ctx, id)

	var r0 *identity.Identity
	if rf, ok := ret.Get(0).(func(context.Context, string) *identity.Identity); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
