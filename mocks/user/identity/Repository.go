// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	identity "github.com/RagOfJoes/mylo/user/identity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, newIdentity
func (_m *Repository) Create(ctx context.Context, newIdentity identity.Identity) (*identity.Identity, error) {
	ret := _m.Called(ctx, newIdentity)

	var r0 *identity.Identity
	if rf, ok := ret.Get(0).(func(context.Context, identity.Identity) *identity.Identity); ok {
		r0 = rf(ctx, newIdentity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, identity.Identity) error); ok {
		r1 = rf(ctx, newIdentity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id, permanent
func (_m *Repository) Delete(ctx context.Context, id uuid.UUID, permanent bool) error {
	ret := _m.Called(ctx, id, permanent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, id, permanent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id, critical
func (_m *Repository) Get(ctx context.Context, id uuid.UUID, critical bool) (*identity.Identity, error) {
	ret := _m.Called(ctx, id, critical)

	var r0 *identity.Identity
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool) *identity.Identity); ok {
		r0 = rf(ctx, id, critical)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool) error); ok {
		r1 = rf(ctx, id, critical)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithIdentifier provides a mock function with given fields: ctx, identifier, critical
func (_m *Repository) GetWithIdentifier(ctx context.Context, identifier string, critical bool) (*identity.Identity, error) {
	ret := _m.Called(ctx, identifier, critical)

	var r0 *identity.Identity
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *identity.Identity); ok {
		r0 = rf(ctx, identifier, critical)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, identifier, critical)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, updateIdentity
func (_m *Repository) Update(ctx context.Context, updateIdentity identity.Identity) (*identity.Identity, error) {
	ret := _m.Called(ctx, updateIdentity)

	var r0 *identity.Identity
	if rf, ok := ret.Get(0).(func(context.Context, identity.Identity) *identity.Identity); ok {
		r0 = rf(ctx, updateIdentity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, identity.Identity) error); ok {
		r1 = rf(ctx, updateIdentity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
