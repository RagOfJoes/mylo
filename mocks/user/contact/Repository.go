// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	contact "github.com/RagOfJoes/mylo/user/contact"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, contacts
func (_m *Repository) Create(ctx context.Context, contacts ...contact.Contact) ([]contact.Contact, error) {
	ret := _m.Called(ctx, contacts)

	var r0 []contact.Contact
	if rf, ok := ret.Get(0).(func(context.Context, ...contact.Contact) []contact.Contact); ok {
		r0 = rf(ctx, contacts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contact.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...contact.Contact) error); ok {
		r1 = rf(ctx, contacts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, contactID
func (_m *Repository) Delete(ctx context.Context, contactID uuid.UUID) error {
	ret := _m.Called(ctx, contactID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, contactID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllUser provides a mock function with given fields: ctx, identityID
func (_m *Repository) DeleteAllUser(ctx context.Context, identityID uuid.UUID) error {
	ret := _m.Called(ctx, identityID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, identityID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, contactID
func (_m *Repository) Get(ctx context.Context, contactID uuid.UUID) (*contact.Contact, error) {
	ret := _m.Called(ctx, contactID)

	var r0 *contact.Contact
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *contact.Contact); ok {
		r0 = rf(ctx, contactID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contact.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, contactID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByValue provides a mock function with given fields: ctx, valud
func (_m *Repository) GetByValue(ctx context.Context, valud string) (*contact.Contact, error) {
	ret := _m.Called(ctx, valud)

	var r0 *contact.Contact
	if rf, ok := ret.Get(0).(func(context.Context, string) *contact.Contact); ok {
		r0 = rf(ctx, valud)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contact.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, valud)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, updateContact
func (_m *Repository) Update(ctx context.Context, updateContact contact.Contact) (*contact.Contact, error) {
	ret := _m.Called(ctx, updateContact)

	var r0 *contact.Contact
	if rf, ok := ret.Get(0).(func(context.Context, contact.Contact) *contact.Contact); ok {
		r0 = rf(ctx, updateContact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contact.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, contact.Contact) error); ok {
		r1 = rf(ctx, updateContact)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
