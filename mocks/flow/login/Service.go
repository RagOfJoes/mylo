// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	login "github.com/RagOfJoes/mylo/flow/login"
	identity "github.com/RagOfJoes/mylo/user/identity"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, flowID
func (_m *Service) Find(ctx context.Context, flowID string) (*login.Flow, error) {
	ret := _m.Called(ctx, flowID)

	var r0 *login.Flow
	if rf, ok := ret.Get(0).(func(context.Context, string) *login.Flow); ok {
		r0 = rf(ctx, flowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*login.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, flowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, requestURL
func (_m *Service) New(ctx context.Context, requestURL string) (*login.Flow, error) {
	ret := _m.Called(ctx, requestURL)

	var r0 *login.Flow
	if rf, ok := ret.Get(0).(func(context.Context, string) *login.Flow); ok {
		r0 = rf(ctx, requestURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*login.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, requestURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Submit provides a mock function with given fields: ctx, flow, payload
func (_m *Service) Submit(ctx context.Context, flow login.Flow, payload login.Payload) (*identity.Identity, error) {
	ret := _m.Called(ctx, flow, payload)

	var r0 *identity.Identity
	if rf, ok := ret.Get(0).(func(context.Context, login.Flow, login.Payload) *identity.Identity); ok {
		r0 = rf(ctx, flow, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, login.Flow, login.Payload) error); ok {
		r1 = rf(ctx, flow, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
