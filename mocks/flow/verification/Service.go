// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	contact "github.com/RagOfJoes/mylo/user/contact"

	identity "github.com/RagOfJoes/mylo/user/identity"

	mock "github.com/stretchr/testify/mock"

	verification "github.com/RagOfJoes/mylo/flow/verification"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, flowID, _a2
func (_m *Service) Find(ctx context.Context, flowID string, _a2 identity.Identity) (*verification.Flow, error) {
	ret := _m.Called(ctx, flowID, _a2)

	var r0 *verification.Flow
	if rf, ok := ret.Get(0).(func(context.Context, string, identity.Identity) *verification.Flow); ok {
		r0 = rf(ctx, flowID, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, identity.Identity) error); ok {
		r1 = rf(ctx, flowID, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDefault provides a mock function with given fields: ctx, _a1, _a2, requestURL
func (_m *Service) NewDefault(ctx context.Context, _a1 identity.Identity, _a2 contact.Contact, requestURL string) (*verification.Flow, error) {
	ret := _m.Called(ctx, _a1, _a2, requestURL)

	var r0 *verification.Flow
	if rf, ok := ret.Get(0).(func(context.Context, identity.Identity, contact.Contact, string) *verification.Flow); ok {
		r0 = rf(ctx, _a1, _a2, requestURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, identity.Identity, contact.Contact, string) error); ok {
		r1 = rf(ctx, _a1, _a2, requestURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSessionWarn provides a mock function with given fields: ctx, _a1, _a2, requestURL
func (_m *Service) NewSessionWarn(ctx context.Context, _a1 identity.Identity, _a2 contact.Contact, requestURL string) (*verification.Flow, error) {
	ret := _m.Called(ctx, _a1, _a2, requestURL)

	var r0 *verification.Flow
	if rf, ok := ret.Get(0).(func(context.Context, identity.Identity, contact.Contact, string) *verification.Flow); ok {
		r0 = rf(ctx, _a1, _a2, requestURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, identity.Identity, contact.Contact, string) error); ok {
		r1 = rf(ctx, _a1, _a2, requestURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitSessionWarn provides a mock function with given fields: ctx, flow, _a2, payload
func (_m *Service) SubmitSessionWarn(ctx context.Context, flow verification.Flow, _a2 identity.Identity, payload verification.SessionWarnPayload) (*verification.Flow, error) {
	ret := _m.Called(ctx, flow, _a2, payload)

	var r0 *verification.Flow
	if rf, ok := ret.Get(0).(func(context.Context, verification.Flow, identity.Identity, verification.SessionWarnPayload) *verification.Flow); ok {
		r0 = rf(ctx, flow, _a2, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, verification.Flow, identity.Identity, verification.SessionWarnPayload) error); ok {
		r1 = rf(ctx, flow, _a2, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: ctx, flow, _a2
func (_m *Service) Verify(ctx context.Context, flow verification.Flow, _a2 identity.Identity) (*verification.Flow, error) {
	ret := _m.Called(ctx, flow, _a2)

	var r0 *verification.Flow
	if rf, ok := ret.Get(0).(func(context.Context, verification.Flow, identity.Identity) *verification.Flow); ok {
		r0 = rf(ctx, flow, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, verification.Flow, identity.Identity) error); ok {
		r1 = rf(ctx, flow, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
