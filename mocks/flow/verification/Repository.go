// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	uuid "github.com/gofrs/uuid"
	mock "github.com/stretchr/testify/mock"

	verification "github.com/RagOfJoes/mylo/flow/verification"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, newFlow
func (_m *Repository) Create(ctx context.Context, newFlow verification.Flow) (*verification.Flow, error) {
	ret := _m.Called(ctx, newFlow)

	var r0 *verification.Flow
	if rf, ok := ret.Get(0).(func(context.Context, verification.Flow) *verification.Flow); ok {
		r0 = rf(ctx, newFlow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, verification.Flow) error); ok {
		r1 = rf(ctx, newFlow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *Repository) Get(ctx context.Context, id uuid.UUID) (*verification.Flow, error) {
	ret := _m.Called(ctx, id)

	var r0 *verification.Flow
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *verification.Flow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByContactID provides a mock function with given fields: ctx, contactID
func (_m *Repository) GetByContactID(ctx context.Context, contactID uuid.UUID) (*verification.Flow, error) {
	ret := _m.Called(ctx, contactID)

	var r0 *verification.Flow
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *verification.Flow); ok {
		r0 = rf(ctx, contactID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, contactID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByFlowIDOrVerifyID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByFlowIDOrVerifyID(ctx context.Context, id string) (*verification.Flow, error) {
	ret := _m.Called(ctx, id)

	var r0 *verification.Flow
	if rf, ok := ret.Get(0).(func(context.Context, string) *verification.Flow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, updateFlow
func (_m *Repository) Update(ctx context.Context, updateFlow verification.Flow) (*verification.Flow, error) {
	ret := _m.Called(ctx, updateFlow)

	var r0 *verification.Flow
	if rf, ok := ret.Get(0).(func(context.Context, verification.Flow) *verification.Flow); ok {
		r0 = rf(ctx, updateFlow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*verification.Flow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, verification.Flow) error); ok {
		r1 = rf(ctx, updateFlow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
